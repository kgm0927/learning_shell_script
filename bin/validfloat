#!/bin/bash


# chapter1-6

# validfloat--숫자가 유효한 부동 소수점 값인지 테스트한다.
#   이 스크립트는 지수 표기법(1.304e5)을 허용하지 않는다.

# 입력된 값이 부동 소수점 숫자인지 테스트하려면,
#   정수 부분과 분수 부분의 두 부분으로 값을 분할해야 한다.
#   첫 번째 부분을 테스트해 유효한 정수인지 확인한 후
#   두 번째 유효한 >= 0 정수인지의 여부를 테스트한다.
#   그래서 -30.5는 유효한 것으로 확인되지만, -30.8은 그렇지 않다.

# "." 소스 명령어를 사용해 다른 셸 스크립트를 포함시킨다.
# 아주 쉽다.

. validint

validfloat()
{
    fvalue="$1"

    # 입력된 숫자에 소수점이 있는지 확인한다.
    if [ ! -z $(echo $fvalue | sed 's/[^.]//g') ] ; then # 1

    # 소수점 앞부분을 추출.
    decimalPart="$(echo $fvalue | cut -d. -f1)" # 2

    # 소수점 뒤의 숫자들을 추출.
    fractionalPart="${fvalue#*\.}"  # 3

    # 소수점 왼쪽에 있는 모든 부분인 소수 부분을 테스트해 시작한다.

    if [ ! -z $decimalPart ] ; then # 4
    # "!"은 테스트 로직을 반대로 한다.
    # 그래서 다음은 "유효한 정수가 아니라면"이다.
    if ! validint "$decimalPart" "" "" ; then
    return 1
    fi
    fi

    # 이제 분수 값을 테스트해보자.

    # 시작하려면 33.-11과 같이 소수점 뒤에 음수 부호를 사용할 수 없으므로
    # 소수점의 '-' 기호를 테스트해보자.

    if [ "${fractionalPart%${fractionalPart#?}}" = "-" ] ; then # 5
       echo "Invalid floating-point number: '-' not allowed \
       after decimal point." >&2
       return 1
    fi
    if [ "$fractionalPart" != "" ] ; then
    # 만약 분수 부분이 유효한 정수가 아니라면...
    if ! validint "$fractionalPart" "0" "" ; then
    return 1
    fi
   fi

   else
   # 전체 값이 "-"인 경우에도 유효한 값이 아니다.
   if [ "$fvalue" = "-" ] ; then    # 6
   echo "Invalid floating-point format." >&2
   return 1
   fi

    # 마지막으로, 나머지 자릿수가 실제로 정수로 유효한지 확인하자.
    if ! validint "$fvalue" "" ""; then
        return 1
    fi
fi

return 0

}

if validint $1 ; then
    echo "$1 is a valid floating-point value."
    fi
    exit 0